{
    "env": {
        "browser": true,
        "es2021": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        //"prettier",
        "plugin:prettier/recommended"  // <- problems with array formatting (buy why?)
    ],
	 "overrides": [
		{
			"files": ["*.svelte"],
			"parser": "svelte-eslint-parser",
			// Parse the `<script>` in `.svelte` as TypeScript by adding the following configuration.
			"parserOptions": {
				"parser": "@typescript-eslint/parser"
			}
		}
	 ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module",
        "project": ["./tsconfig.json"],
        "extraFileExtensions": [".svelte"]
    },
    "plugins": [
    	  "svelte",
        "@typescript-eslint",
        "prettier"
    ],
    "rules": {
        "prettier/prettier": "warn",
        //"prettier/prettier": "error",
        //"array-bracket-newline": ["error", "consistent", { "multiline": true }],
        //"array-bracket-newline": ["error", "consistent"],
        "prefer-const": "warn",
        "camelcase" :"error",
        "no-unmodified-loop-condition" : "error",
        "no-multi-assign" : "error",
        "no-self-assign" : "off",
        "curly": ["error", "multi-line"],
        "indent": [
            "error",
            "tab"
        ],
        "linebreak-style": [
            "error",
            "unix"
        ],
        "quotes": [
            "error",
            "single"
        ],
        "semi": [
            "error",
            "never"
        ],
        //"class-methods-use-this": "error",   // methods must use this.variable, otherwise they can be static
        "no-var": "error",
        "radix": "error",  // parseInt("073",10)
        "brace-style": ["error", "1tbs", { "allowSingleLine": true }],
        "prefer-numeric-literals": "error",
        //"no-undefined": "error",  // must use "undefined" instead of undefined
        "eqeqeq": "error",
        "no-extra-label": "error",
        "no-label-var": "error",
        "no-new": "error",
        "no-nested-ternary": "error",
        "no-floating-decimal": "error",
        "no-implicit-globals": "error",
        "no-duplicate-imports": "error",
        "no-self-compare": "error",
        "no-unreachable-loop": "error",
        //"no-use-before-define": "error",
        "no-use-before-define": ["error", {
            "functions": true,
            //"classes": true,
            "classes": false,
            "variables": true,
            "allowNamedExports": false
        }],
        "comma-dangle": ["error", {
          "arrays": "only-multiline",   // also possible "always-multiline"
          "objects": "only-multiline",
          "imports": "only-multiline",
          "exports": "only-multiline",
          "functions": "only-multiline"
        }],
        "comma-spacing": ["error", { "before": false, "after": true }],  // a, b, c
        "no-trailing-spaces": "error",
        "space-before-blocks": "error",
        "space-before-function-paren": ["error", "never"],
        "new-parens": ["error", "never"],  // new Error but not new Error()
        "no-inner-declarations": "off", //otherwise warnings in svelte script
        // very important const a = 5; if (a) { const a = 7 } not ALLOWED
        //"no-shadow": "off",
        "no-unused-vars": "off", // must be disabled for the following line
    	  "@typescript-eslint/no-unused-vars": "warn",
        "@typescript-eslint/no-shadow": ["error"],
        "@typescript-eslint/strict-boolean-expressions": ["error", {
            "allowString": false,
            "allowNumber": false,
            "allowNullableObject": true,
            "allowNullableBoolean": false,
            "allowNullableString": false,
            "allowNullableNumber": false,
            "allowAny": false
        }],
        "@typescript-eslint/switch-exhaustiveness-check": "warn",
		  "@typescript-eslint/type-annotation-spacing": [
		  	"warn",
		  	{
		  		"before": false,
		  		//"before": true, // prettier doesn't support this
		  		"after": true
		  	}
		  ]
    }
}
